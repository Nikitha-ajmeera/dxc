Object Oriented Programming : 
_____________________________

It is an approach that provides a way of modularizing programming, that which can be used 
to create small partition memory area for both data and objects, which are to be used
as templates for creating copies of such modules on demand. 

Object : An object is a real world entity, that which possess 3 characterstics known as

	(i) State 

	(ii) Behaviour

	(iii) Identity 

OOPs Features : 
________________

	(i) Encapsulation : Wrapping up of data and functions into a single unit known as Encapsulation.

	(ii) Abstraction : Hiding the irrelevant details of an object, that do not contribute to its essential characterstics,
				known as Abstraction.

		*** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant
			details ***

	(iii) Inheritance : Deriving a new entity from already existing entity known as inheritance, throguh inheritance we can
				reduce the size of the program. 

	 (iv) Polymorphism : The ability to take more than one form known as Polymorpshim. 

class : A class is a template or blueprint, that which contains combination of data members and member functions. Members of the class can be accessable by using the instance of the class. 

class class_name 
{
   data members;
   member functions;
}


Why Java : 
___________

1) Platform Independent : Write Once and Run Anywhere. 

2) Console Apps

3) Windows Apps

4) Web Apps

5) Service-Oriented 

6) Mobile Apps 

7) Packages : Contains group of related classes and interfaces that which belongs to one common group, if you want to overcome the naming conflicts between classes, then we need the help of packages. 

Java Features : 
_________________

	1) Simple : Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal
			details like memory management etc... how much memory allocated to run the 
			program, the same amount of memory will be reallocated automatically. 

	2) Object Oriented : Java supports all object-oriented programming features, as it is purely
			object oriented programming language. 

	3) Compiled and Interpreted : Java programs are compiled first, during compilation java code will be converted into bytecode,
			then .class file will be created. In interpretation it reads the bytecode line by line and executes. 

	4) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any environment without changing the source code. 

	5) Securable : Security is the key thing for any kind of application, java implements different levels of security as

			(i) Compiler Level

			(ii) Bytecode Level

			(iii) Class Loader Level

	6) Distributed : By using Java, we can make all distributed and enterprize applications. 


Java Architecture : 
_____________________

	1) Java Program : Java code that which stored with extension (.java) 

	2) Java Class  : Java Code after compilation its converted into bytecode, then (.class) file will be created. 

	3) JVM (Java Virtual Machine) 

		It contains various components as 

		   (i) Class Loader : Used to load all classes that which are required to 
				run the program. There are 2 types of class loaders known as


			(a) Primordial Class Loader : Used to load all system classes that which are required to run the program.

			(b) Class Loader Objects : Used to load all custom classes that which are required to run the program. 

		  (ii) JIT Compiler (Just-In Time) : Used to convert bytecode into CPU specific format. 

		(iii) Execution Manager : Contains QUEUE of programs, which are ready to run, where we can execute the program.
				*** Before execution it needs to undergone the security authentication ***

	4) Java API : It provides runtime environment, that which allows you to run the java program. 

		JDK (Java Development Kit)

		JRE (Java Runtime Environment) 



Data Types : 
____________

There are 2 types of data types as 


	(i) Value types : 
		
		int, float, double, char, boolean, byte etc...

       (ii) Reference types :

		String, Object and custom classes. 

*** value types will be stored in STACK memory, and reference types will be stored in Heap memory ***

System.out.println() : Used to display any value or message. 

	System -> class
	out -> Console
	println() -> Method. 

System.out.println("Welcome to Java Programming...");

int a=12;
double b=12.5;
String name="Raj";

System.out.println("A value is " +a);
System.out.println("B value is " +b);
System.out.println("Name is  " +name);

System.out.println("A value " +a+ " B value " +b+ " Name " +name);

You can define method main() as 

public static void main(String[] args) {
...
...
...
}

Access Modifiers : 
__________________

   1) private : Allows you to access members within the current class. 

   2) public  : Allows you to access members in entire application. 

   3) protected : Allows you to access members within current/derived classes. 

   4) friendly : By default, java takes friendly as default access modifer, allows you to access members within all classes of
		current package. 


Naming Standards : 
____________________

	(i) Class name always starts with capital letter. 

       (ii) Method name always starts with lower case, when you separate work then its capital.
		example : define as method as sayhello(), 

		void sayHello() {
                }


Integer.parseInt() : Used to convert string into integer. 

Assume, value as "12" means 12 is in string format, that we have to convert to integer, 
then we need Integer.parseInt() 

Double.parseDouble() : Used to parse string to double value. 

You can create an object to the class as 

class_name obj = new class_name();



java.lang is the default package, that which contains Math functions for performing matchematical operations. 

Control Structures : 
_____________________

Used to define the flow of the program. 

There are 2 types of control structures known as 

	(i) Branching

	if...else : Executes statements based on the condition. 

		if (condition) {
			statement(s);
		} else {
		      statement(s);
		}

	(ii) Looping : 


	while loop : This loop executes all the statements repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop.  For every loop, basically there are 3 phases as 

		(i) Initialization : Performed at the beginning of the loop.

	       (ii) Condition : Performed at the conditional part of the loop.

	      (iii) Increment/Decrement : Performed before closing the loop. 


		while(condition) {
			statement(s);
		}



for loop : This loop executes all the statements repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. 

for(initialization;condition;increment/decrement) {
  statement(s);
}

switch...case : Used to define any menu-driven programs. 

switch(expr) {
     case expr1 : statement(s);
		  break;
     case expr2 : statments(s);
		  break;

     ....
     ....
     default {
            statement(s);
	    break;
    }
}

Strings are immutable as Once they are assigned they cannot be changed by using 
any string methods. 

There are various string methods are there. 

length() : Finds the length of given string. 
indexOf() : Used to display the first occurrence of given char. 
chatAt() : used to display the character at specific position. 

Array : An array is the finite ordered set of homogeneous elements, means all 
the elements belongs to same data type. All the elements of the array are stored in 
successive memory locations.

int[] a = new int[]{5,8,2,66};

a[0]=5;
a[1]=8;
a[2]=2;
a[3]=66;

int[] a = new int[] {5,98,45,66,23};
		for (int i : a) {
			System.out.println(i);
		}

internal execution of foreach loop :
_____________________________________

In the above code, at first i points to the first element in array A, after processing
first element, it checks whether next element is there or not by using hasNext(), 
if hasNext() returns true, it moves to the next element by using next(). 

It repeats until hasNext() turns false. 

void show(int x) {
...
...
}

show();
show(12);
show(12,5);
show(12,6,77);

varargs : You can pass varying argument in a method by using (...) 

There are 2 types of memories as 


	(i) Stack
 
       (ii) Heap 


*** Value types will be stored in STACK memory, and reference types will be stored in HEAP memory ***

The top level class in java is 
java.lang.Object 

It contains various built-in method(s) as 

	-> hashCode()

	-> toString()

	-> equals()

	-> getClass() 
























































































Write a program as accept dayName and check its weekEnd or weekDay. 





























































































